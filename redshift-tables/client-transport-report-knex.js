const schemaName = "schema";
const tableName = "client_transport_report";
exports.up = function (knex) {
	return knex.schema.withSchema(schemaName).createTable(tableName, (table) => {
		table.string("serviceid", 255).notNull();
		table.string("mediaunitid", 255).notNull();
		table.timestamp("timestamp", { useTz: false }).notNull();
		table.specificType("callid", "CHAR(36)").notNull();
		table.specificType("clientid", "CHAR(36)").notNull();
		table.specificType("peerconnectionid", "CHAR(36)").notNull();
		table.bigInteger("bytesreceived");
		table.bigInteger("bytessent");
		table.text("candidatepairavailableincomingbitrate");
		table.text("candidatepairavailableoutgoingbitrate");
		table.bigInteger("candidatepairbytesdiscardedonsend");
		table.bigInteger("candidatepairbytesreceived");
		table.bigInteger("candidatepairbytessent");
		table.integer("candidatepaircircuitbreakertriggercount");
		table.bigInteger("candidatepairconsentexpiredtimestamp");
		table.bigInteger("candidatepairconsentrequestbytessent");
		table.integer("candidatepairconsentrequestssent");
		table.text("candidatepaircurrentroundtriptime");
		table.bigInteger("candidatepairfirstrequesttimestamp");
		table.bigInteger("candidatepairlastpacketreceivedtimestamp");
		table.bigInteger("candidatepairlastpacketsenttimestamp");
		table.bigInteger("candidatepairlastrequesttimestamp");
		table.bigInteger("candidatepairlastresponsetimestamp");
		table.integer("candidatepairpacketsdiscardedonsend");
		table.integer("candidatepairpacketsreceived");
		table.integer("candidatepairpacketssent");
		table.bigInteger("candidatepairrequestbytessent");
		table.integer("candidatepairrequestsreceived");
		table.integer("candidatepairrequestssent");
		table.bigInteger("candidatepairresponsebytessent");
		table.integer("candidatepairresponsesreceived");
		table.integer("candidatepairresponsessent");
		table.integer("candidatepairretransmissionreceived");
		table.integer("candidatepairretransmissionsent");
		table.string("candidatepairstate", 255);
		table.text("candidatepairtotalroundtriptime");
		table.text("dtlscipher");
		table.string("dtlsstate", 255);
		table.text("icelocalusernamefragment");
		table.text("icerole");
		table.string("icetransportstate", 255);
		table.text("label");
		table.text("localaddress");
		table.text("localcandidateiceserverurl");
		table.string("localcandidaterelayprotocol", 255);
		table.text("localcandidatetype");
		table.integer("localport");
		table.string("localprotocol", 255);
		table.text("marker");
		table.integer("packetsreceived");
		table.integer("packetssent");
		table.text("remoteaddress");
		table.text("remotecandidateiceserverurl");
		table.string("remotecandidaterelayprotocol", 255);
		table.text("remotecandidatetype");
		table.integer("remoteport");
		table.string("remoteprotocol", 255);
		table.string("roomid", 255);
		table.text("sctpcongestionwindow");
		table.integer("sctpmtu");
		table.text("sctpreceiverwindow");
		table.text("sctpsmoothedroundtriptime");
		table.integer("sctpunackdata");
		table.integer("selectedcandidatepairchanges");
		table.text("srtpcipher");
		table.text("tlsgroup");
		table.text("tlsversion");
		table.string("userid", 255);
	});
};