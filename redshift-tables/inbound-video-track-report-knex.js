const schemaName = "schema";
const tableName = "inbound_video_track_report";
exports.up = function (knex) {
	return knex.schema.withSchema(schemaName).createTable(tableName, (table) => {
		table.string("serviceid", 255).notNull();
		table.string("mediaunitid", 255).notNull();
		table.timestamp("timestamp", { useTz: false }).notNull();
		table.specificType("callid", "CHAR(36)").notNull();
		table.specificType("clientid", "CHAR(36)").notNull();
		table.specificType("peerconnectionid", "CHAR(36)").notNull();
		table.integer("sampleseq").notNull();
		table.bigInteger("ssrc").notNull();
		table.bigInteger("bytesreceived");
		table.bigInteger("bytessent");
		table.text("decoderimplementation");
		table.bigInteger("estimatedplayouttimestamp");
		table.integer("fecpacketsdiscarded");
		table.integer("fecpacketsreceived");
		table.integer("fircount");
		table.integer("frameheight");
		table.integer("framesdecoded");
		table.integer("framesdropped");
		table.text("framespersecond");
		table.integer("framesreceived");
		table.integer("framewidth");
		table.bigInteger("headerbytesreceived");
		table.text("jitter");
		table.text("jitterbufferdelay");
		table.integer("jitterbufferemittedcount");
		table.text("jitterbufferminimumdelay");
		table.text("jitterbuffertargetdelay");
		table.integer("keyframesdecoded");
		table.text("label");
		table.bigInteger("lastpacketreceivedtimestamp");
		table.text("marker");
		table.integer("nackcount");
		table.integer("packetsdiscarded");
		table.integer("packetslost");
		table.integer("packetsreceived");
		table.integer("packetssent");
		table.integer("plicount");
		table.bigInteger("qpsum");
		table.string("remoteclientid", 255);
		table.string("remotepeerconnectionid", 255);
		table.bigInteger("remotetimestamp");
		table.string("remotetrackid", 255);
		table.string("remoteuserid", 255);
		table.integer("reportssent");
		table.string("roomid", 255);
		table.text("roundtriptime");
		table.integer("roundtriptimemeasurements");
		table.specificType("sfusinkid", "CHAR(36)");
		table.specificType("sfustreamid", "CHAR(36)");
		table.text("totaldecodetime");
		table.text("totalinterframedelay");
		table.text("totalprocessingdelay");
		table.text("totalroundtriptime");
		table.text("totalsquaredinterframedelay");
		table.specificType("trackid", "CHAR(36)");
		table.string("userid", 255);
	});
};