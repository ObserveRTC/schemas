const schemaName = "schema";
const tableName = "outbound_audio_track_report";
exports.up = function (knex) {
	return knex.schema.withSchema(schemaName).createTable(tableName, (table) => {
		table.string("serviceid", 255).notNull();
		table.string("mediaunitid", 255).notNull();
		table.timestamp("timestamp", { useTz: false }).notNull();
		table.specificType("callid", "CHAR(36)").notNull();
		table.specificType("clientid", "CHAR(36)").notNull();
		table.specificType("peerconnectionid", "CHAR(36)").notNull();
		table.integer("sampleseq").notNull();
		table.bigInteger("ssrc").notNull();
		table.boolean("active");
		table.text("audiolevel");
		table.text("averagertcpinterval");
		table.bigInteger("bytessent");
		table.text("droppedsamplesduration");
		table.integer("droppedsamplesevents");
		table.text("echoreturnloss");
		table.text("echoreturnlossenhancement");
		table.text("encoderimplementation");
		table.text("fractionlost");
		table.bigInteger("headerbytessent");
		table.text("jitter");
		table.text("label");
		table.text("marker");
		table.integer("nackcount");
		table.integer("packetslost");
		table.integer("packetsreceived");
		table.integer("packetssent");
		table.boolean("relayedsource");
		table.bigInteger("retransmittedbytessent");
		table.integer("retransmittedpacketssent");
		table.text("rid");
		table.string("roomid", 255);
		table.text("roundtriptime");
		table.integer("roundtriptimemeasurements");
		table.specificType("sfustreamid", "CHAR(36)");
		table.integer("targetbitrate");
		table.text("totalaudioenergy");
		table.text("totalcapturedelay");
		table.bigInteger("totalencodedbytestarget");
		table.text("totalpacketsenddelay");
		table.text("totalroundtriptime");
		table.text("totalsamplescaptured");
		table.text("totalsamplesduration");
		table.specificType("trackid", "CHAR(36)");
		table.string("userid", 255);
	});
};